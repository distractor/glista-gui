/* tslint:disable */
/* eslint-disable */
/**
 * Glista API
 * Glista ASP.NET Core Web API.
 *
 * The version of the OpenAPI document: v1
 * Contact: mitjajancic@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddNewEventGroupPilotDTO } from '../model';
// @ts-ignore
import { EditEventGroupPilotDTO } from '../model';
// @ts-ignore
import { EventGroupPilotDTO } from '../model';
/**
 * EventGroupPilotApi - axios parameter creator
 * @export
 */
export const EventGroupPilotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [teamId] 
         * @param {number} [pilotId] 
         * @param {number} [eventGroupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotGetEventGroupPilotsGet: async (teamId?: number, pilotId?: number, eventGroupId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EventGroupPilot/GetEventGroupPilots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['teamId'] = teamId;
            }

            if (pilotId !== undefined) {
                localVarQueryParameter['pilotId'] = pilotId;
            }

            if (eventGroupId !== undefined) {
                localVarQueryParameter['eventGroupId'] = eventGroupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEventGroupPilotIdDelete', 'id', id)
            const localVarPath = `/api/EventGroupPilot/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEventGroupPilotIdGet', 'id', id)
            const localVarPath = `/api/EventGroupPilot/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EditEventGroupPilotDTO} [editEventGroupPilotDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotIdPut: async (id: number, editEventGroupPilotDTO?: EditEventGroupPilotDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEventGroupPilotIdPut', 'id', id)
            const localVarPath = `/api/EventGroupPilot/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editEventGroupPilotDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddNewEventGroupPilotDTO} [addNewEventGroupPilotDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotPost: async (addNewEventGroupPilotDTO?: AddNewEventGroupPilotDTO, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EventGroupPilot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addNewEventGroupPilotDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventGroupPilotApi - functional programming interface
 * @export
 */
export const EventGroupPilotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventGroupPilotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [teamId] 
         * @param {number} [pilotId] 
         * @param {number} [eventGroupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventGroupPilotGetEventGroupPilotsGet(teamId?: number, pilotId?: number, eventGroupId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventGroupPilotDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventGroupPilotGetEventGroupPilotsGet(teamId, pilotId, eventGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventGroupPilotIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventGroupPilotIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventGroupPilotIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventGroupPilotDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventGroupPilotIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EditEventGroupPilotDTO} [editEventGroupPilotDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventGroupPilotIdPut(id: number, editEventGroupPilotDTO?: EditEventGroupPilotDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventGroupPilotIdPut(id, editEventGroupPilotDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddNewEventGroupPilotDTO} [addNewEventGroupPilotDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventGroupPilotPost(addNewEventGroupPilotDTO?: AddNewEventGroupPilotDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventGroupPilotDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventGroupPilotPost(addNewEventGroupPilotDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventGroupPilotApi - factory interface
 * @export
 */
export const EventGroupPilotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventGroupPilotApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [teamId] 
         * @param {number} [pilotId] 
         * @param {number} [eventGroupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotGetEventGroupPilotsGet(teamId?: number, pilotId?: number, eventGroupId?: number, options?: any): AxiosPromise<Array<EventGroupPilotDTO>> {
            return localVarFp.apiEventGroupPilotGetEventGroupPilotsGet(teamId, pilotId, eventGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventGroupPilotIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotIdGet(id: number, options?: any): AxiosPromise<EventGroupPilotDTO> {
            return localVarFp.apiEventGroupPilotIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EditEventGroupPilotDTO} [editEventGroupPilotDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotIdPut(id: number, editEventGroupPilotDTO?: EditEventGroupPilotDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventGroupPilotIdPut(id, editEventGroupPilotDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddNewEventGroupPilotDTO} [addNewEventGroupPilotDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventGroupPilotPost(addNewEventGroupPilotDTO?: AddNewEventGroupPilotDTO, options?: any): AxiosPromise<EventGroupPilotDTO> {
            return localVarFp.apiEventGroupPilotPost(addNewEventGroupPilotDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventGroupPilotApi - object-oriented interface
 * @export
 * @class EventGroupPilotApi
 * @extends {BaseAPI}
 */
export class EventGroupPilotApi extends BaseAPI {
    /**
     * 
     * @param {number} [teamId] 
     * @param {number} [pilotId] 
     * @param {number} [eventGroupId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGroupPilotApi
     */
    public apiEventGroupPilotGetEventGroupPilotsGet(teamId?: number, pilotId?: number, eventGroupId?: number, options?: any) {
        return EventGroupPilotApiFp(this.configuration).apiEventGroupPilotGetEventGroupPilotsGet(teamId, pilotId, eventGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGroupPilotApi
     */
    public apiEventGroupPilotIdDelete(id: number, options?: any) {
        return EventGroupPilotApiFp(this.configuration).apiEventGroupPilotIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGroupPilotApi
     */
    public apiEventGroupPilotIdGet(id: number, options?: any) {
        return EventGroupPilotApiFp(this.configuration).apiEventGroupPilotIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EditEventGroupPilotDTO} [editEventGroupPilotDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGroupPilotApi
     */
    public apiEventGroupPilotIdPut(id: number, editEventGroupPilotDTO?: EditEventGroupPilotDTO, options?: any) {
        return EventGroupPilotApiFp(this.configuration).apiEventGroupPilotIdPut(id, editEventGroupPilotDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddNewEventGroupPilotDTO} [addNewEventGroupPilotDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGroupPilotApi
     */
    public apiEventGroupPilotPost(addNewEventGroupPilotDTO?: AddNewEventGroupPilotDTO, options?: any) {
        return EventGroupPilotApiFp(this.configuration).apiEventGroupPilotPost(addNewEventGroupPilotDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Glista API
 * Glista ASP.NET Core Web API.
 *
 * The version of the OpenAPI document: v1
 * Contact: mitjajancic@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GliderDTO } from '../model';
/**
 * GliderApi - axios parameter creator
 * @export
 */
export const GliderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {string} [modelName] 
         * @param {'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other'} [safetyClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGliderGetGlidersGet: async (company?: string, modelName?: string, safetyClass?: 'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Glider/GetGliders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }

            if (modelName !== undefined) {
                localVarQueryParameter['modelName'] = modelName;
            }

            if (safetyClass !== undefined) {
                localVarQueryParameter['safetyClass'] = safetyClass;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GliderApi - functional programming interface
 * @export
 */
export const GliderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GliderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {string} [modelName] 
         * @param {'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other'} [safetyClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGliderGetGlidersGet(company?: string, modelName?: string, safetyClass?: 'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GliderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGliderGetGlidersGet(company, modelName, safetyClass, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GliderApi - factory interface
 * @export
 */
export const GliderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GliderApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {string} [modelName] 
         * @param {'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other'} [safetyClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGliderGetGlidersGet(company?: string, modelName?: string, safetyClass?: 'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other', options?: any): AxiosPromise<Array<GliderDTO>> {
            return localVarFp.apiGliderGetGlidersGet(company, modelName, safetyClass, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GliderApi - object-oriented interface
 * @export
 * @class GliderApi
 * @extends {BaseAPI}
 */
export class GliderApi extends BaseAPI {
    /**
     * 
     * @param {string} [company] 
     * @param {string} [modelName] 
     * @param {'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other'} [safetyClass] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GliderApi
     */
    public apiGliderGetGlidersGet(company?: string, modelName?: string, safetyClass?: 'EnA' | 'EnB' | 'EnC' | 'EnD' | 'EnCCC' | 'Other', options?: any) {
        return GliderApiFp(this.configuration).apiGliderGetGlidersGet(company, modelName, safetyClass, options).then((request) => request(this.axios, this.basePath));
    }
}
